# addfeatures.ndf

# created by Mike Jenkins
  May 2017 to replace the old procpkg.ndf

# This file processes the global initalization files to produce
     basics.c
     basics.h
     defstbl.h
     pkgswchs.h
appropriate to the Q'Nial packages being installed.
It creates these in the ../src directory.

# features 1) allows blank lines in primitive *.nh files and *.txt package files
           2) lines can be commented out by placing a
              # symbol at the very beginning of a line

settrigger o;  % avoid faults for directory creation failures;

geninitcall IS OP Primname Prop {
   link 'init_primname("' Primname '",''' Prop ''');' }

insertslash is OP Str {
    EscapeChars := '"\';
    NewStr := Null;
    FOR c WITH Str DO
      IF c in EscapeChars THEN
        NewStr := NewStr append `\;
      ENDIF;
      NewStr := NewStr append c;
    ENDFOR;
    NewStr
}


# the following routines are copied from niallib.

newhost IS OPERATION Comm {  
       Svt := settrigger o ; 
       Fh := open Comm 'pr' ; 
       IF not isfault Fh THEN 
          Res := Null ; 
          WHILE not isfault ( Line := readfile Fh ) DO 
             Res := Res append Line ; 
          ENDWHILE ; 
          close Fh ; 
          settrigger Svt ; 
          Res
       ELSE 
          settrigger Svt ; 
          fault ( link '?Failed to open pipe to: ' Comm ) 
       ENDIF 
     } 

filelist IS OPERATION Path Pattern { 
   Cmd := link '\ls -da ' Path OS_Path_Separator ( string Pattern );
   Nms := newhost Cmd;
   IF not empty Nms THEN
     last (first OS_Path_Separator findall (first Nms)+1) EACHRIGHT drop Nms
   ELSE
     Nms
   ENDIF
} 

filelist1 IS OPERATION Pattern {  
      newhost ( link '\ls -da ' ( string Pattern ) ) 
} 


# routine to build the table entries

mkstrtbl IS OP Tblnm Defs Isstatic {
  Lines := EACH insertslash Defs;
  Lines := '"' EACHRIGHT link Lines EACHLEFT link '",';
  Tbl := link 
           [link '#define NOLINES ' (string tally Lines),'']
           [ link (IF Isstatic THEN 'static ' ELSE '' ENDIF)
                'char *' (string Tblnm) '[' (string tally Lines) '] = {' ] 
           Lines 
           ['};'];
  Tbl };


  unpad IS OP st { parts :=  (match st ` ) cut st;
                   link ((first parts) (eachleft link (rest parts) ' '))
                   }; 


spliton IS OP splitter str {
  (match splitter@0 str) cut str 
}



ProcessPackage IS OP Pkgname {
  Pkglist := getfile link 'packages/' Pkgname;
% separate Package name first line from the rest of the lines;
  Packagename Pkglist := [first,rest] Pkglist;
%remove empty lines;
  Pkglist := FILTER ([]~=) Pkglist;
% remove lines beginning with #;
  Featurenames := FILTER (`#~=first) Pkglist;
  write 'The following features are being installed:';
  FOR Feature with Featurenames DO 
     write link '   ' Feature;
  ENDFOR;
% The next section processes the names of Q'Nial primitives;
% These are gathered from coreprims.nh and the *.nh files in each features directory;
  Entries := getfile "coreprims.nh;
% loop to pick up *.nh file for each Feature;
  FOR Feature WITH Featurenames DO
    NHfile := link 'all_features/' Feature '/' (tolower Feature)'.nh';
    Entries := Entries link getfile NHfile;
  ENDFOR;
% included in the package by placing the primitive name(s) in the;
% apply table(s) and by generating a call on init_primname for;
% each to be included in the initialization code;
% and to initialize dispatch tables and lists :;
  Unarydisp := [ 'void (*applytab[])() = {' ];
  Binarydisp := [ 'void (*binapplytab[])() = {' ];
  Primlist := Null;
  Nmlist := Null;
  Initlist := Null; 
  Entries := FILTER ([]~=) Entries;
  Entries := FILTER (`#~=first) Entries;
  Primlistvalid := true;
  FOR I WITH tell tally Entries DO
    Pieces := spliton ' ' Entries@I;
    Feature Prop Primname Ufname := 4 take Pieces;
    IF Primname in Primlist THEN
      write 'ERROR: duplicate primitive name' Primname;
      Primlistvalid := false;
      EXIT fault('?duplicate primitive name: ' link Primname);
    ENDIF;
    Primlist := Primlist append Primname;
    Nmlist := Nmlist append Ufname;
    Unarydisp := Unarydisp append (Ufname link ',');
    Initlist := Initlist append geninitcall (toupper Primname) (first Prop);
    IF tally Pieces > 4 THEN
        Bfname :=  last Pieces; 
        Binarydisp := Binarydisp append (Bfname link ',');
        Nmlist := Nmlist append Bfname;
    ENDIF;
  ENDFOR;
 IF Primlistvalid THEN
%  Complete the dispatchers and generate the initprims routine:;
  Unarydisp := Unarydisp link ['};'];
  Binarydisp := Binarydisp link ['};'];
  Initprims := link [ 'void initprims()', '{' ] Initlist ['}'];
%  Now build the lines for basics.c;
  Basicsc := link [
    '/*================================================================',
    '',
    '                MODULE BASICS.C     ',
    '',
    '      This module contains the unary and binary dispatch tables used to',
    '      access all the Nial primitives that are written in C.',
    '      It also contains the routine that dynamically links the Nial',
    '      name for the primitive to its slot in the dispatch table.',
    '',
    '================================================================',
    '',
    'GENERATED by addfeatures.ndf',
    '',
    '================================================================*/',
    '',
   '#include "basics.h"',
   ''] [''] Unarydisp [''] Binarydisp [''] Initprims ;
%  output basics.c ;
  putfile '../src/basics.c' Basicsc;
% process the name list to create basics.h info;
  Basicsh := [
    '/* BASICS.H */',
    '',
    'extern void init_primname(char * primname,char prop);',
    'extern void initprims(void);',
    'extern void (*applytab[]) (void);',
    'extern void (*binapplytab[]) (void);',
    ''];
  FOR Nm WITH Nmlist DO
    Basicsh := Basicsh link [link 'extern void ' Nm '(void);'];
  ENDFOR;
  putfile '../src/basics.h' Basicsh;
  Defs := getfile 'nialcoredefs.ndf';
% Loop to process the definition files for the features;
  FOR Feature WITH Featurenames DO
    Defsfilename := (link 'all_features/' Feature '/' (tolower Feature) '.ndf');
  %write Defsfilename;
    Featuredefs := getfile Defsfilename;
    IF not isfault Featuredefs THEN
       Defs := Defs link Featuredefs append ' ';
    ENDIF;
  ENDFOR;
  putfile '../src/defs.ndf' Defs;
%  work to build the defstbl.h file used by nial.c in initialization;
  Defstbl := link [
    '/*==================================================================',
    '',
    '            defstbl.h',
    '',
    '   GENERATED by addfeatures.ndf',
    '',
    '==================================================================*/',
    '' ] 
   (mkstrtbl 'defsndf' Defs True);
  putfile '../src/defstbl.h' Defstbl;
%  work to build the package switches file;
  Pkgswchs := [
    '/*==================================================================',
    '',
    '            pkgswchs.h',
    '',
    '   GENERATED by addfeatures.ndf',
    '',
    '==================================================================*/',
    '' ];
% create file pkgswchs.h ;
  FOR Feature with Featurenames DO
     Pkgswchs := Pkgswchs append link '#define ' Feature;
  ENDFOR;
  putfile '../src/pkgswchs.h' Pkgswchs;
% copy files to src dir ;
  newhost 'cp src_nialcore/* ../src';
  FOR Feature WITH Featurenames DO
     Cmd := link 'cp all_features/' Feature '/' Feature '_src/*.[ch] ../src' ;
     newhost Cmd;
  ENDFOR;
%  work to build the CMakeLists.txt file;
  Cmaketext := getfile 'Cmakeheader';
% add .c files for Features ub NIAL_SRC;
  FOR Feature WITH Featurenames DO
     Srcfiles := filelist (link 'all_features/' Feature '/' Feature '_src') '*.c';
     FOR Srcfile WITH Srcfiles DO
       Cmaketext := Cmaketext append (link '   ' Srcfile);
     ENDFOR;
  ENDFOR;
  Cmaketext := Cmaketext link getfile 'Cmakemiddle';
% add Cmake lines for feature;
  FOR Feature WITH Featurenames DO
    Cmakefilename := (link 'all_features/' Feature '/' (tolower Feature) '_cmake');
  %write Cmakefilename;
    FeatureCmake := getfile Cmakefilename;
    IF not isfault FeatureCmake THEN
       Cmaketext := Cmaketext link FeatureCmake append ' ';
    ENDIF;
  ENDFOR;
  Cmaketext := Cmaketext link getfile 'Cmaketrailer';
  putfile '../src/CMakeLists.txt' Cmaketext;
  write link 'Completed work for Package: ' Packagename;
  ENDIF
} 


Processapkg IS {
  Allpkgs := './' filelist 'packages/*.txt';
  writescreen 'Available Packages:';
  FOR i WITH tell tally Allpkgs DO
    writescreen (link ' ' (string i)') ' (string Allpkgs@i));
  ENDFOR;
  writescreen 'Enter a single package number:';
  res := readscreen '> ';
  Pkg := (execute res) pick Allpkgs;
  writescreen 'You have chosen:';
  write Pkg;
  Processpackage Pkg;
  }


Processapkg; 


Bye


